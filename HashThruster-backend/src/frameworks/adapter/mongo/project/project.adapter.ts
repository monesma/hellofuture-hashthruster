import { ProjectQuery } from '../../../../domain/types/project-types';

export function adapterMongoDataProject(
  mongoProjectResponse: any
): ProjectQuery {
  return {
    _id: mongoProjectResponse._id.toString(),
    creation_date: mongoProjectResponse.creation_date,
    projectName: mongoProjectResponse.projectName,
    tokenName: mongoProjectResponse.tokenName,
    tokenSymbol: mongoProjectResponse.tokenSymbol,
    projectWebsite: mongoProjectResponse.projectWebsite,
    projectDescription: mongoProjectResponse.projectDescription,
    teamMemberCount: mongoProjectResponse.teamMemberCount,
    teamMembers: mongoProjectResponse.teamMembers.map((member: any) => ({
      name: member.name,
      position: member.position,
      linkedin: member.linkedin,
    })),
    hasPartners: mongoProjectResponse.hasPartners,
    partnerCount: mongoProjectResponse.partnerCount,
    mainPartner: mongoProjectResponse.mainPartner,
    partnerRole: mongoProjectResponse.partnerRole,
    technologies: mongoProjectResponse.technologies,
    isOpenSource: mongoProjectResponse.isOpenSource,
    repositoryLink: mongoProjectResponse.repositoryLink,
    isAudited: mongoProjectResponse.isAudited,
    auditCompany: mongoProjectResponse.auditCompany,
    tokenPurpose: mongoProjectResponse.tokenPurpose,
    tokenSupply: mongoProjectResponse.tokenSupply,
    tokenDistribution: mongoProjectResponse.tokenDistribution,
    tokenStandard: mongoProjectResponse.tokenStandard,
    hashscanLink: mongoProjectResponse.hashscanLink,
    businessModel: mongoProjectResponse.businessModel,
    revenueGeneration: mongoProjectResponse.revenueGeneration,
    tokenUseCases: mongoProjectResponse.tokenUseCases,
    hasRoadMap: mongoProjectResponse.hasRoadMap,
    roadMapLink: mongoProjectResponse.roadMapLink,
    registeredCountry: mongoProjectResponse.registeredCountry,
    compliesWithRegulations: mongoProjectResponse.compliesWithRegulations,
    obtainedLegalAdvice: mongoProjectResponse.obtainedLegalAdvice,
    marketingStrategy: mongoProjectResponse.marketingStrategy,
    communicationChannels: mongoProjectResponse.communicationChannels,
    communityMembers: mongoProjectResponse.communityMembers,
    risks: mongoProjectResponse.risks,
    challenges: mongoProjectResponse.challenges,
    fundraisingTarget: mongoProjectResponse.fundraisingTarget,
    minInvestment: mongoProjectResponse.minInvestment,
    maxInvestment: mongoProjectResponse.maxInvestment,
    tokenValue: mongoProjectResponse.tokenValue,
    successReason: mongoProjectResponse.successReason,
    differentiation: mongoProjectResponse.differentiation,
    launchDate: mongoProjectResponse.launchDate,
    hasLaunched: mongoProjectResponse.hasLaunched,
    projectLaunchDate: mongoProjectResponse.projectLaunchDate,
    pdfFileName: mongoProjectResponse.pdfFileName,
    projectEmail: mongoProjectResponse.projectEmail,
    status: mongoProjectResponse.status,
  };
}
